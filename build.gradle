plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.9.25'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.hibernate.orm' version '6.6.9.Final'
	id 'org.graalvm.buildtools.native' version '0.10.5'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.25'
	id 'org.liquibase.gradle' version '2.2.1'
	id 'org.jetbrains.dokka' version '1.9.20'
	id 'org.asciidoctor.jvm.convert' version '4.0.2'
	id 'org.asciidoctor.jvm.pdf' version '4.0.2'
}

group = 'np.sthaniya'
version = '1.0.8-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation('org.springframework.boot:spring-boot-starter-mail')
	implementation('com.sun.mail:jakarta.mail:2.0.1')
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.postgresql:postgresql:42.7.5'
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.springframework.session:spring-session-jdbc'
	implementation 'org.hibernate.validator:hibernate-validator:8.0.2.Final'
	implementation 'jakarta.validation:jakarta.validation-api:3.1.1'
	implementation "io.jsonwebtoken:jjwt-api:0.12.5"
	runtimeOnly "io.jsonwebtoken:jjwt-impl:0.12.5"
	runtimeOnly "io.jsonwebtoken:jjwt-jackson:0.12.5"
	implementation 'org.slf4j:slf4j-api:2.0.12'
	implementation 'ch.qos.logback:logback-classic:1.4.14'
	implementation 'ch.qos.logback:logback-core:1.4.14'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	
	// Redis dependencies for caching
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'io.lettuce:lettuce-core:6.3.2.RELEASE'
	
	// Additional cache integration dependencies
	implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
	implementation 'org.springframework.data:spring-data-redis'
	implementation 'com.fasterxml.jackson.module:jackson-module-jaxb-annotations'
	
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.mockito.kotlin:mockito-kotlin:5.2.1'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testRuntimeOnly 'com.h2database:h2:2.3.232'
	
	// OpenAPI Documentation
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	implementation 'org.springdoc:springdoc-openapi-starter-common:2.3.0'
	implementation 'org.springdoc:springdoc-openapi-kotlin:1.7.0'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	
	// Dokka dependencies
	dokkaHtmlPlugin("org.jetbrains.dokka:kotlin-as-java-plugin:1.9.20")
	
	// Bucket4j rate limiting
	implementation 'com.github.vladimir-bukhtoyarov:bucket4j-core:7.6.0'
	implementation 'com.github.vladimir-bukhtoyarov:bucket4j-jcache:7.6.0'
	implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	
	// Spring REST Docs
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	
	// Asciidoctor PDF theme dependencies
	asciidoctorExt 'org.asciidoctor:asciidoctorj-pdf:2.3.9'

	// Storage
    implementation "io.minio:minio:8.5.9"
    implementation "software.amazon.awssdk:s3:2.25.11"

	   // Spatial and Geometry support
    implementation "org.locationtech.jts:jts-core"
    implementation "org.hibernate.orm:hibernate-spatial"

	  // GeoJSON-Jackson
    implementation "de.grundid.opendatalab:geojson-jackson:1.14"
    implementation "org.locationtech.jts.io:jts-io-common:1.19.0"
	
	// Thymeleaf dependencies
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-java8time:3.0.4.RELEASE'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'
    
    // Webjars for frontend libraries
    implementation 'org.webjars:webjars-locator-core'
    implementation 'org.webjars:bootstrap:5.3.2'
    implementation 'org.webjars:font-awesome:6.7.2'
    implementation 'org.webjars.npm:htmx.org:1.9.5'
    implementation 'org.webjars.npm:alpinejs:3.13.0'
	
	// Add dotenv dependency for .env file processing
    implementation 'io.github.cdimascio:dotenv-kotlin:6.4.1'
}

ext {
	snippetsDir = file('build/generated-snippets')
	docsDir = file('src/docs/asciidoc')
}

springBoot {
	buildInfo()
}

test {
	useJUnitPlatform()
	outputs.dir snippetsDir
}

asciidoctorj {
    modules {
       diagram.use() 
       diagram.version '2.3.1' 
    }
}

asciidoctor {
	configurations 'asciidoctorExt'
	inputs.dir snippetsDir

	// Don't depend on test to avoid running during build
	// dependsOn test
	
	sources {
		include '*.adoc'
	}
	baseDirFollowsSourceDir()
	attributes = [
		'snippets': snippetsDir,
		'version': project.version,
		'revdate': new Date().format('yyyy-MM-dd'),
		'toc': 'left',
		'icons': 'font',
		'source-highlighter': 'highlight.js'
	]
}

asciidoctorPdf {
	configurations 'asciidoctorExt'
	inputs.dir snippetsDir

	dependsOn test
	
	sources {
		include '*.adoc'
	}
	baseDirFollowsSourceDir()
	attributes = [
		'snippets': snippetsDir,
		'version': project.version,
		'revdate': new Date().format('yyyy-MM-dd'),
		'toc': 'left',
		'icons': 'font',
		'source-highlighter': 'coderay',
		'pdf-stylesdir': "${docsDir}/theme",
		'pdf-style': 'custom'
	]
}

bootJar {
	// Remove dependencies on asciidoctor tasks
	// dependsOn asciidoctor, asciidoctorPdf
	
	// Only copy documentation if it exists
	doLast {
		if (file("${asciidoctor.outputDir}/html5").exists()) {
			copy {
				from "${asciidoctor.outputDir}/html5"
				into 'build/resources/main/static/docs/html'
			}
		}
		if (file("${asciidoctorPdf.outputDir}/pdf").exists()) {
			copy {
				from "${asciidoctorPdf.outputDir}/pdf"
				into 'build/resources/main/static/docs/pdf'
			}
		}
	}
}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}

hibernate {
	enhancement {
		enableAssociationManagement = true
	}
}

allOpen {
	annotation 'jakarta.persistence.Entity'
	annotation 'jakarta.persistence.MappedSuperclass'
	annotation 'jakarta.persistence.Embeddable'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.dokkaHtml.configure {
	outputDirectory.set(file("${buildDir}/dokka"))
	
	// Dokka configuration
	moduleName.set(project.name)
	moduleVersion.set(project.version.toString())
	
	// Source sets configuration
	dokkaSourceSets {
		named("main") {
			displayName.set("Backend API")
			sourceRoots.from(file("src/main/kotlin"))
			
			jdkVersion.set(21)
			noStdlibLink.set(false)
			noJdkLink.set(false)
			
			// Optional: Configure source links
			sourceLink {
				localDirectory.set(file("src/main/kotlin"))
				remoteUrl.set(java.net.URI("https://github.com/yourorganization/yourproject/tree/main/src/main/kotlin").toURL())
				remoteLineSuffix.set("#L")
			}
		}
	}
}

task generateDocs(dependsOn: ['test', 'asciidoctor', 'asciidoctorPdf']) {
	description = 'Generates complete API and database documentation in HTML and PDF formats'
	group = 'Documentation'
}

// Read environment variables from .env file for bootRun task
def envProps = new Properties()
file('.env').withInputStream { envProps.load(it) }

bootRun {
    // Configure environment variables for bootRun task
    environment = envProps
    
    // Additional JVM arguments if needed
    jvmArgs = [
        '-Dspring.profiles.active=dev',
        '-Dspring.output.ansi.enabled=always',
        '-Djava.io.tmpdir=./tmp'  // Set temporary directory to ./tmp
    ]
    
    // Explicit configuration of environment variables to ensure they are used
    systemProperties = [
        "spring.datasource.url": envProps.getProperty('SPRING_DATASOURCE_URL'),
        "spring.datasource.username": envProps.getProperty('SPRING_DATASOURCE_USERNAME'),
        "spring.datasource.password": envProps.getProperty('SPRING_DATASOURCE_PASSWORD'),
        "redis.host": envProps.getProperty('REDIS_HOST'),
        "redis.port": envProps.getProperty('REDIS_PORT'), 
        "redis.password": envProps.getProperty('REDIS_PASSWORD'),
        // Add a system property for the server temp directory
        "server.tomcat.basedir": "./tmp/tomcat-dpis"
    ]
    
    // Ensure the temp directory exists before the run
    doFirst {
        mkdir "./tmp"
        mkdir "./tmp/tomcat-dpis"
    }
}
